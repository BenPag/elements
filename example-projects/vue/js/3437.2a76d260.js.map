{"version":3,"file":"js/3437.2a76d260.js","mappings":";;;GAKA,MAAMA,EAAmB,oHAEzB,IAAIC,EAAa,MACfC,YAAYC,IACVC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,aAAcC,EAAAA,EAAAA,GAAYF,KAAM,cAAe,GAEtDG,aAAaC,GACXJ,KAAKK,aAAaD,GAEE,yBACpBJ,KAAKK,aAAaL,KAAKI,OACvB,MAAME,QAAeN,KAAKO,YAC1BD,EAAOE,SAASC,IACdA,EAAMC,iBAAiB,aAAa,IAAMV,KAAKW,kBAAkBF,KACjEA,EAAMC,iBAAiB,YAAY,IAAMV,KAAKY,4BAGxB,6BACxB,MAAMN,QAAeN,KAAKO,YAC1BD,EAAOE,SAASC,IACdA,EAAMI,oBAAoB,aAAa,IAAMb,KAAKW,kBAAkBF,KACpEA,EAAMI,oBAAoB,YAAY,IAAMb,KAAKY,4BAMlC,oBAACE,GAClB,IAAIC,EAAIC,EACR,IAAKF,EAAGG,IAAIC,WAAW,SACrB,OACFJ,EAAGK,iBACH,MAAMb,QAAeN,KAAKO,YACpBa,EAAed,EAAOe,MAAMZ,GAAUa,QAAQb,EAAMc,WAC1D,IAAKH,EAEH,YADApB,KAAKC,YAAYuB,KAAKlB,EAAO,GAAGF,OAGlC,IAAIqB,EACJ,OAAQX,EAAGG,KACT,IAAK,YACL,IAAK,aACHQ,EAC6C,QAA1CV,EAAKK,EAAaM,0BAAuC,IAAPX,EAAgBA,EAAKT,EAAO,GACjF,MACF,IAAK,UACL,IAAK,YACHmB,EACiD,QAA9CT,EAAKI,EAAaO,8BAA2C,IAAPX,EAAgBA,EAAKV,EAAOA,EAAOsB,OAAS,GACrG,MAEJ5B,KAAKC,YAAYuB,KAAKC,EAAgBrB,OAKjB,wBAACyB,GACtB,MAAMvB,QAAeN,KAAKO,YACpBa,EAAed,EAAOe,MAAMZ,GAAUa,QAAQb,EAAMc,WACrDH,GAAgBS,IAAiBT,GAGtCA,EAAaU,UAAUC,IAAI,qBAEH,6BACxB,MAAMzB,QAAeN,KAAKO,YACpBa,EAAed,EAAOe,MAAMZ,GAAUA,EAAMqB,UAAUE,SAAS,uBAChEZ,GAGLA,EAAaU,UAAUG,OAAO,qBAEd,mBAAC7B,GAMjB,MAAME,QAAeN,KAAKO,YAC1B,IAAI2B,GAAa,EAEjB,IAAK,MAAMzB,KAASH,EACdG,EAAMc,SACRd,EAAMqB,UAAUG,OAAO,qBAEpBC,GAAczB,EAAML,QAAUA,EAUjCK,EAAMc,SAAU,GANhBW,GAAa,EACbzB,EAAMc,SAAU,GASfW,GACHC,QAAQC,KAAM,kCAAiChC,gBAGnDG,YACE,OAAO8B,QAAQC,IAAIC,MAAMC,KAAKxC,KAAKyC,GAAGC,iBAAiB,eAEzDC,SACE,OAAQC,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,MAAMD,EAAAA,EAAAA,GAAE,MAAO,CAAEE,MAAO,0BAA2BC,SAAU,IAAKH,EAAAA,EAAAA,GAAE,OAAQ,QAE1FH,SAAO,OAAOO,EAAAA,EAAAA,GAAWhD,MAClBiD,sBAAa,MAAO,CAC7B,MAAS,CAAC,mBAGdrD,EAAWsD,MAAQvD","sources":["webpack://elements-vue-example/../elements/dist/esm/ino-radio-group.entry.js"],"sourcesContent":["/*!\n * Crafted with ❤ by inovex GmbH\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-5082bac1.js';\n\nconst inoRadioGroupCss = \"ino-radio-group .ino-radio-group-wrapper{width:fit-content}ino-radio-group ino-radio:last-child{margin-right:8px}\";\n\nlet RadioGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.valueChange = createEvent(this, \"valueChange\", 7);\n  }\n  valueChanged(value) {\n    this.updateRadios(value);\n  }\n  async componentDidLoad() {\n    this.updateRadios(this.value);\n    const radios = await this.getRadios();\n    radios.forEach((radio) => {\n      radio.addEventListener('mouseover', () => this.addHoverAnimation(radio));\n      radio.addEventListener('mouseout', () => this.removeHoverAnimation());\n    });\n  }\n  async disconnectedCallback() {\n    const radios = await this.getRadios();\n    radios.forEach((radio) => {\n      radio.removeEventListener('mouseover', () => this.addHoverAnimation(radio));\n      radio.removeEventListener('mouseout', () => this.removeHoverAnimation());\n    });\n  }\n  /**\n   * Allows key navigation once radio group has been focused.\n   */\n  async handleKeyDown(ev) {\n    var _a, _b;\n    if (!ev.key.startsWith('Arrow'))\n      return;\n    ev.preventDefault();\n    const radios = await this.getRadios();\n    const checkedRadio = radios.find((radio) => Boolean(radio.checked));\n    if (!checkedRadio) {\n      this.valueChange.emit(radios[0].value);\n      return;\n    }\n    let nextRadioButton;\n    switch (ev.key) {\n      case 'ArrowDown':\n      case 'ArrowRight':\n        nextRadioButton =\n          (_a = checkedRadio.nextElementSibling) !== null && _a !== void 0 ? _a : radios[0];\n        break;\n      case 'ArrowUp':\n      case 'ArrowLeft':\n        nextRadioButton =\n          (_b = checkedRadio.previousElementSibling) !== null && _b !== void 0 ? _b : radios[radios.length - 1];\n        break;\n    }\n    this.valueChange.emit(nextRadioButton.value);\n  }\n  /**\n   * Adds a hover animation to the currently checked ino radio\n   */\n  async addHoverAnimation(hoveredRadio) {\n    const radios = await this.getRadios();\n    const checkedRadio = radios.find((radio) => Boolean(radio.checked));\n    if (!checkedRadio || hoveredRadio === checkedRadio) {\n      return;\n    }\n    checkedRadio.classList.add('ino-checked-hover');\n  }\n  async removeHoverAnimation() {\n    const radios = await this.getRadios();\n    const checkedRadio = radios.find((radio) => radio.classList.contains('ino-checked-hover'));\n    if (!checkedRadio) {\n      return;\n    }\n    checkedRadio.classList.remove('ino-checked-hover');\n  }\n  async updateRadios(value) {\n    /**\n     * Make sure we get all radios first\n     * so values are up to date prior\n     * to caching the radio group value\n     */\n    const radios = await this.getRadios();\n    let hasChecked = false;\n    // Walk the DOM in reverse order, since the last selected one wins!\n    for (const radio of radios) {\n      if (radio.checked) {\n        radio.classList.remove('ino-checked-hover');\n      }\n      if (!hasChecked && radio.value === value) {\n        // correct value for this radio\n        // but this radio isn't checked yet\n        // and we haven't found a checked yet\n        hasChecked = true;\n        radio.checked = true;\n      }\n      else {\n        // this radio doesn't have the correct value\n        // or the radio group has been already checked\n        radio.checked = false;\n      }\n    }\n    // Reset value if\n    if (!hasChecked) {\n      console.warn(`No ino-radio button with value=${value} was found.`);\n    }\n  }\n  getRadios() {\n    return Promise.all(Array.from(this.el.querySelectorAll('ino-radio')));\n  }\n  render() {\n    return (h(Host, null, h(\"div\", { class: \"ino-radio-group-wrapper\", tabIndex: 0 }, h(\"slot\", null))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueChanged\"]\n  }; }\n};\nRadioGroup.style = inoRadioGroupCss;\n\nexport { RadioGroup as ino_radio_group };\n"],"names":["inoRadioGroupCss","RadioGroup","constructor","hostRef","registerInstance","this","valueChange","createEvent","valueChanged","value","updateRadios","radios","getRadios","forEach","radio","addEventListener","addHoverAnimation","removeHoverAnimation","removeEventListener","ev","_a","_b","key","startsWith","preventDefault","checkedRadio","find","Boolean","checked","emit","nextRadioButton","nextElementSibling","previousElementSibling","length","hoveredRadio","classList","add","contains","remove","hasChecked","console","warn","Promise","all","Array","from","el","querySelectorAll","render","h","Host","class","tabIndex","getElement","watchers","style"],"sourceRoot":""}