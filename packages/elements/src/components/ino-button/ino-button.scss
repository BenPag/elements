@use "@material/button/mdc-button";
@use "@material/button";
@use 'styles/colors';
@use 'styles/fonts';
@use '../ino-spinner/styles/circle.mixins.scss' as spinner;
@use 'styles/mixins';

// Shadows
$small-shadow: 0 4px 8px 0 rgba(61, 64, 245, 0.3),
  0 12px 28px 0 rgba(61, 214, 245, 0.14);
$big-shadow: 0 8px 16px 0 rgba(61, 64, 245, 0.3),
  0 16px 32px 0 rgba(61, 214, 245, 0.14);

// Borders
$round-border: 24px 24px 24px 24px;
$edged-border: 0 24px 24px 24px;

@mixin setButtonColors($color-map) {

  .mdc-button {
    @include button.ink-color(map-get($color-map, base));

    &:hover {
      @include button.container-fill-color(rgba(map-get($color-map, base), 0.1));
    }
    &:active {
      @include button.container-fill-color(rgba(map-get($color-map, base), 0.25));
    }

    &.mdc-button--raised,
    &.mdc-button--unelevated {
      @include button.filled-accessible(map-get($color-map, base));
      @include button.ink-color(map-get($color-map, contrast));

      .ino-spinner__composer {
        @include spinner.circle-color(map-get($color-map, contrast));
      }

      &:hover {
        @include button.filled-accessible(rgba(map-get($color-map, base), 0.85));
      }
      &:active {
        @include button.container-fill-color(rgba(map-get($color-map, base), 0.75));
      }
    }

    &.mdc-button--outlined {
      @include button.outline-color(map-get($color-map, base));
      @include button.ink-color(map-get($color-map, dark));

      .ino-spinner__composer {
        @include spinner.circle-color(map-get($color-map, base));
      }
    }
  }
}

:host {
  display: inline-block;

  // Shared Attributes
  .mdc-button {
    @include fonts.ino-font($size: s, $weight: semibold);
    letter-spacing: 1.5px;
    text-align: center;
    @include button.shape-radius($edged-border);
    @include mixins.animateBorderRadius(
        'round-to-edge',
        $round-border,
        $edged-border,
        0.3s
    );

    &:active,
    &:hover {
      @include mixins.animateBorderRadius(
          'edge-to-round',
          $edged-border,
          $round-border,
          0.15s
      );
      @include button.shape-radius($round-border);
    }

    &.mdc-button--raised {
      box-shadow: $big-shadow;

      &:hover {
        box-shadow: $small-shadow;
      }

      &:active {
        box-shadow: $big-shadow;
      }
    }

    &.mdc-button--raised:disabled,
    &.mdc-button--unelevated:disabled {
      background-color: colors.ino-color(light, dark);
      color: white;
    }

    &.mdc-button--outlined {
      @include button.outline-width(2px);

      &:disabled {
        @include button.disabled-outline-color(colors.ino-color(light, base));
        @include button.ink-color(colors.ino-color(light, base));
      }
    }
  }

  .ino-button--dense {
    @include button.density(-1);
  }
}

:host([ino-loading="true"]) {
  button {
    pointer-events: none;
  }

  .mdc-button__label {
    height: 20px;
  }
}

// set default when no color scheme is provided
@include setButtonColors(map-get(colors.$ino-color-scheme, primary));

@each $color-name, $map in colors.$ino-color-scheme {
  :host([ino-color-scheme="#{$color-name}"]) {
    @include setButtonColors($map);
  }
}

.ino-button--dense {
  @include button.density(-1);
}
