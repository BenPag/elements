@use '@material/fab/mdc-fab';
@use '@material/fab';
@use 'styles/colors';
@use 'styles/mixins';

$edge-positions: top-left, top-right, bottom-right, bottom-left;

$edged-borders: (
  none: 50%,
  top-left: 0 50% 50% 50%,
  top-right: 50% 0 50% 50%,
  bottom-right: 50% 50% 0 50%,
  bottom-left: 50% 50% 50% 0
);

$extended-edged-borders: (
  none: 24px,
  top-left: 0 24px 24px 24px,
  top-right: 24px 0 24px 24px,
  bottom-right: 24px 24px 0 24px,
  bottom-left: 24px 24px 24px 0
);

@mixin setColorsPerState($map) {
  .mdc-fab {
    @include fab.ink-color(map-get($map, contrast));
    @include fab.container-color(map-get($map, base));

    &:hover {
      @include fab.container-color(map-get($map, light));
    }

    &:active, &:after {
      @include fab.container-color(map-get($map, dark));
    }

    ::slotted(ino-icon), ino-icon {
      --icon-color: #{map-get($map, contrast)};
    }
  }
}

@mixin setEdgedBorders($position) {
  &:not(.mdc-fab--extended) {
    border-radius: map_get($edged-borders, $position);
    @include mixins.buttonRoundingAnimation(map_get($edged-borders, none), map_get($edged-borders, $position), fab-#{$position}-default);
  }

  &.mdc-fab--extended {
    border-radius: map_get($extended-edged-borders, $position);
    @include mixins.buttonRoundingAnimation(map_get($extended-edged-borders, none), map_get($extended-edged-borders, $position), fab-#{$position}-extended);
  }
}

// Default color scheme
:host(:not([ino-color-scheme])) {
  @include setColorsPerState(map-get(colors.$ino-color-scheme, primary));
}

// Generate ino-color-scheme classes
@each $color-name, $map in colors.$ino-color-scheme {
  :host([ino-color-scheme='#{$color-name}']) {
    @include setColorsPerState($map);
  }
}

// Default Edge
:host(:not([ino-edge-position])) .mdc-fab {
  @include setEdgedBorders(top-left);
}

// Generate ino-edge-position classes
@each $position in $edge-positions {
  :host([ino-edge-position="#{$position}"]) .mdc-fab {
    @include setEdgedBorders($position);
  }
}

:host {
  display: inline-block;

  .mdc-fab {

    ::slotted(ino-icon), ino-icon {
      --icon-width: 30px;
      --icon-height: 30px;
    }

    &.mdc-fab--mini ::slotted(ino-icon), &.mdc-fab--mini ino-icon {
      --icon-width: 25px;
      --icon-height: 25px;
    }

    &:not(.mdc-fab--extended), &.mdc-fab--extended {
      box-shadow: 0 4px 8px 0 rgba(61, 64, 245, 0.30), 0 12px 28px 0 rgba(61, 214, 245, 0.14);
    }

    &:active {
      box-shadow: 0 8px 16px 0 rgba(61, 64, 245, 0.30), 0 16px 32px 0 rgba(61, 214, 245, 0.14);
    }

    &:disabled {
      @include fab.ink-color(white);
      @include fab.container-color(colors.ino-color(dark, light));
      pointer-events: none;

      ::slotted(ino-icon), ino-icon {
        --icon-color: white;
      }
    }
  }
}
