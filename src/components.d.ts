/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface InoButton {
      /**
       * Sets the autofocus for this element.
       */
      'autofocus': boolean;
      /**
       * Disables this element.
       */
      'disabled': boolean;
      /**
       * The form id this element origins to.
       */
      'form': string;
      /**
       * Appends an icon before the text.
       */
      'inoIconLeft': string;
      /**
       * Prepends an icon after the text.
       */
      'inoIconRight': string;
      /**
       * Sets a secondary button style
       */
      'inoSecondary': boolean;
      /**
       * The name of the element.
       */
      'name': string;
      /**
       * The type of this form.  Can either be `button`, `submit` or `reset`.
       */
      'type': 'button'|'submit'|'reset';
    }
  }

  interface HTMLInoButtonElement extends StencilComponents.InoButton, HTMLStencilElement {}

  var HTMLInoButtonElement: {
    prototype: HTMLInoButtonElement;
    new (): HTMLInoButtonElement;
  };
  interface HTMLElementTagNameMap {
    'ino-button': HTMLInoButtonElement;
  }
  interface ElementTagNameMap {
    'ino-button': HTMLInoButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-button': JSXElements.InoButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface InoButtonAttributes extends HTMLAttributes {
      /**
       * Sets the autofocus for this element.
       */
      'autofocus'?: boolean;
      /**
       * Disables this element.
       */
      'disabled'?: boolean;
      /**
       * The form id this element origins to.
       */
      'form'?: string;
      /**
       * Appends an icon before the text.
       */
      'inoIconLeft'?: string;
      /**
       * Prepends an icon after the text.
       */
      'inoIconRight'?: string;
      /**
       * Sets a secondary button style
       */
      'inoSecondary'?: boolean;
      /**
       * The name of the element.
       */
      'name'?: string;
      /**
       * The type of this form.  Can either be `button`, `submit` or `reset`.
       */
      'type'?: 'button'|'submit'|'reset';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface InoCard {
      /**
       * Styles this card as raised from other contents.
       */
      'inoRaised': boolean;
    }
  }

  interface HTMLInoCardElement extends StencilComponents.InoCard, HTMLStencilElement {}

  var HTMLInoCardElement: {
    prototype: HTMLInoCardElement;
    new (): HTMLInoCardElement;
  };
  interface HTMLElementTagNameMap {
    'ino-card': HTMLInoCardElement;
  }
  interface ElementTagNameMap {
    'ino-card': HTMLInoCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-card': JSXElements.InoCardAttributes;
    }
  }
  namespace JSXElements {
    export interface InoCardAttributes extends HTMLAttributes {
      /**
       * Styles this card as raised from other contents.
       */
      'inoRaised'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface InoCheckbox {
      /**
       * Marks this element as checked.
       */
      'checked': boolean;
      /**
       * Disables this element.
       */
      'disabled': boolean;
      /**
       * The id of this element.
       */
      'id': string;
      /**
       * The name of this element.
       */
      'name': string;
      /**
       * Sets the tabIndex of this element.
       */
      'tabIndex': number;
      /**
       * The value of this element.
       */
      'value': string;
    }
  }

  interface HTMLInoCheckboxElement extends StencilComponents.InoCheckbox, HTMLStencilElement {}

  var HTMLInoCheckboxElement: {
    prototype: HTMLInoCheckboxElement;
    new (): HTMLInoCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    'ino-checkbox': HTMLInoCheckboxElement;
  }
  interface ElementTagNameMap {
    'ino-checkbox': HTMLInoCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-checkbox': JSXElements.InoCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface InoCheckboxAttributes extends HTMLAttributes {
      /**
       * Marks this element as checked.
       */
      'checked'?: boolean;
      /**
       * Disables this element.
       */
      'disabled'?: boolean;
      /**
       * The id of this element.
       */
      'id'?: string;
      /**
       * The name of this element.
       */
      'name'?: string;
      /**
       * Sets the tabIndex of this element.
       */
      'tabIndex'?: number;
      /**
       * The value of this element.
       */
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface InoDatepicker {
      /**
       * Sets the accesskey of this element.
       */
      'accesskey': string;
      /**
       * Autofocuses this element.
       */
      'autofocus': boolean;
      /**
       * Disables this element.
       */
      'disabled': boolean;
      /**
       * A string of characters which are used to define how the date will be displayed in the input field. If used with time, also provide an format for the time. For more details see [here](https://flatpickr.js.org/formatting/).
       */
      'inoDateFormat': string;
      /**
       * A simple date string that sets the default date.
       */
      'inoDefaultDate': string;
      /**
       * A number containing the initial hour in the date-time picker.
       */
      'inoDefaultHour': number;
      /**
       * A number containing the initial minute in the date-time picker.
       */
      'inoDefaultMinute': number;
      /**
       * If true, displays time picker in 12 hour mode with AM/PM selection.
       */
      'inoTwelfHourTime': boolean;
      /**
       * The type (`date`, `datetime` or `time`) of this date picker element. Default is `date`.
       */
      'inoType': 'date'|'datetime'|'time';
      /**
       * The maximum date that a user can pick to (inclusive).
       */
      'max': string;
      /**
       * The minimum date that a user can start picking from (inclusive).
       */
      'min': string;
      /**
       * Sets the input name of this element.
       */
      'name': string;
      /**
       * Defines the input placeholder for this element.
       */
      'placeholder': string;
      /**
       * Marks this element as required.
       */
      'required': boolean;
      /**
       * Sets the tabindex of this element.
       */
      'tabindex': string;
      /**
       * Contains the value of this element.
       */
      'value': string;
    }
  }

  interface HTMLInoDatepickerElement extends StencilComponents.InoDatepicker, HTMLStencilElement {}

  var HTMLInoDatepickerElement: {
    prototype: HTMLInoDatepickerElement;
    new (): HTMLInoDatepickerElement;
  };
  interface HTMLElementTagNameMap {
    'ino-datepicker': HTMLInoDatepickerElement;
  }
  interface ElementTagNameMap {
    'ino-datepicker': HTMLInoDatepickerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-datepicker': JSXElements.InoDatepickerAttributes;
    }
  }
  namespace JSXElements {
    export interface InoDatepickerAttributes extends HTMLAttributes {
      /**
       * Sets the accesskey of this element.
       */
      'accesskey'?: string;
      /**
       * Autofocuses this element.
       */
      'autofocus'?: boolean;
      /**
       * Disables this element.
       */
      'disabled'?: boolean;
      /**
       * A string of characters which are used to define how the date will be displayed in the input field. If used with time, also provide an format for the time. For more details see [here](https://flatpickr.js.org/formatting/).
       */
      'inoDateFormat'?: string;
      /**
       * A simple date string that sets the default date.
       */
      'inoDefaultDate'?: string;
      /**
       * A number containing the initial hour in the date-time picker.
       */
      'inoDefaultHour'?: number;
      /**
       * A number containing the initial minute in the date-time picker.
       */
      'inoDefaultMinute'?: number;
      /**
       * If true, displays time picker in 12 hour mode with AM/PM selection.
       */
      'inoTwelfHourTime'?: boolean;
      /**
       * The type (`date`, `datetime` or `time`) of this date picker element. Default is `date`.
       */
      'inoType'?: 'date'|'datetime'|'time';
      /**
       * The maximum date that a user can pick to (inclusive).
       */
      'max'?: string;
      /**
       * The minimum date that a user can start picking from (inclusive).
       */
      'min'?: string;
      /**
       * Sets the input name of this element.
       */
      'name'?: string;
      /**
       * Defines the input placeholder for this element.
       */
      'placeholder'?: string;
      /**
       * Marks this element as required.
       */
      'required'?: boolean;
      /**
       * Sets the tabindex of this element.
       */
      'tabindex'?: string;
      /**
       * Contains the value of this element.
       */
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface InoIcon {
      'inoIcon': string;
    }
  }

  interface HTMLInoIconElement extends StencilComponents.InoIcon, HTMLStencilElement {}

  var HTMLInoIconElement: {
    prototype: HTMLInoIconElement;
    new (): HTMLInoIconElement;
  };
  interface HTMLElementTagNameMap {
    'ino-icon': HTMLInoIconElement;
  }
  interface ElementTagNameMap {
    'ino-icon': HTMLInoIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-icon': JSXElements.InoIconAttributes;
    }
  }
  namespace JSXElements {
    export interface InoIconAttributes extends HTMLAttributes {
      'inoIcon'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface InoImg {
      'alt': string;
      'decoding': 'async' | 'auto' | 'sync';
      'height': number;
      'inoRatioHeight': number;
      'inoRatioWidth': number;
      'inoRounded': boolean;
      'sizes': string;
      'src': string;
      'srcset': string;
      'usemap': string;
      'width': number;
    }
  }

  interface HTMLInoImgElement extends StencilComponents.InoImg, HTMLStencilElement {}

  var HTMLInoImgElement: {
    prototype: HTMLInoImgElement;
    new (): HTMLInoImgElement;
  };
  interface HTMLElementTagNameMap {
    'ino-img': HTMLInoImgElement;
  }
  interface ElementTagNameMap {
    'ino-img': HTMLInoImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-img': JSXElements.InoImgAttributes;
    }
  }
  namespace JSXElements {
    export interface InoImgAttributes extends HTMLAttributes {
      'alt'?: string;
      'decoding'?: 'async' | 'auto' | 'sync';
      'height'?: number;
      'inoRatioHeight'?: number;
      'inoRatioWidth'?: number;
      'inoRounded'?: boolean;
      'sizes'?: string;
      'src'?: string;
      'srcset'?: string;
      'usemap'?: string;
      'width'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface InoInput {
      'accesskey': string;
      'autocomplete': string;
      'autofocus': boolean;
      'disabled': boolean;
      'max': string;
      'min': string;
      'name': string;
      'pattern': string;
      'placeholder': string;
      'required': boolean;
      'size': number;
      'tabindex': string;
      'type': string;
      'value': string;
    }
  }

  interface HTMLInoInputElement extends StencilComponents.InoInput, HTMLStencilElement {}

  var HTMLInoInputElement: {
    prototype: HTMLInoInputElement;
    new (): HTMLInoInputElement;
  };
  interface HTMLElementTagNameMap {
    'ino-input': HTMLInoInputElement;
  }
  interface ElementTagNameMap {
    'ino-input': HTMLInoInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-input': JSXElements.InoInputAttributes;
    }
  }
  namespace JSXElements {
    export interface InoInputAttributes extends HTMLAttributes {
      'accesskey'?: string;
      'autocomplete'?: string;
      'autofocus'?: boolean;
      'disabled'?: boolean;
      'max'?: string;
      'min'?: string;
      'name'?: string;
      'pattern'?: string;
      'placeholder'?: string;
      'required'?: boolean;
      'size'?: number;
      'tabindex'?: string;
      'type'?: string;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface InoPopover {
      /**
       * The target id the tooltip is attached to. If not given, the tooltip is attached to the parent component.
       */
      'inoFor': string;
      /**
       * Placement of the tooltip. Accepted values: top(-start, -end), right(-start, -end), bottom(-start, -end), left(-start, -end)
       */
      'inoPlacement': string;
      /**
       * The trigger to show the tooltip - either click, hover or focus. Multiple triggers possible by separating them with a space.
       */
      'inoTrigger': string;
    }
  }

  interface HTMLInoPopoverElement extends StencilComponents.InoPopover, HTMLStencilElement {}

  var HTMLInoPopoverElement: {
    prototype: HTMLInoPopoverElement;
    new (): HTMLInoPopoverElement;
  };
  interface HTMLElementTagNameMap {
    'ino-popover': HTMLInoPopoverElement;
  }
  interface ElementTagNameMap {
    'ino-popover': HTMLInoPopoverElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-popover': JSXElements.InoPopoverAttributes;
    }
  }
  namespace JSXElements {
    export interface InoPopoverAttributes extends HTMLAttributes {
      /**
       * The target id the tooltip is attached to. If not given, the tooltip is attached to the parent component.
       */
      'inoFor'?: string;
      /**
       * Placement of the tooltip. Accepted values: top(-start, -end), right(-start, -end), bottom(-start, -end), left(-start, -end)
       */
      'inoPlacement'?: string;
      /**
       * The trigger to show the tooltip - either click, hover or focus. Multiple triggers possible by separating them with a space.
       */
      'inoTrigger'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface InoRadio {
      'checked': boolean;
      'disabled': boolean;
      'id': string;
      'name': string;
      'tabIndex': number;
      'value': string;
    }
  }

  interface HTMLInoRadioElement extends StencilComponents.InoRadio, HTMLStencilElement {}

  var HTMLInoRadioElement: {
    prototype: HTMLInoRadioElement;
    new (): HTMLInoRadioElement;
  };
  interface HTMLElementTagNameMap {
    'ino-radio': HTMLInoRadioElement;
  }
  interface ElementTagNameMap {
    'ino-radio': HTMLInoRadioElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-radio': JSXElements.InoRadioAttributes;
    }
  }
  namespace JSXElements {
    export interface InoRadioAttributes extends HTMLAttributes {
      'checked'?: boolean;
      'disabled'?: boolean;
      'id'?: string;
      'name'?: string;
      'tabIndex'?: number;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface InoSelect {
      'autofocus': boolean;
      'disabled': boolean;
      'form': string;
      'multiple': boolean;
      'name': string;
      'required': boolean;
      'size': number;
    }
  }

  interface HTMLInoSelectElement extends StencilComponents.InoSelect, HTMLStencilElement {}

  var HTMLInoSelectElement: {
    prototype: HTMLInoSelectElement;
    new (): HTMLInoSelectElement;
  };
  interface HTMLElementTagNameMap {
    'ino-select': HTMLInoSelectElement;
  }
  interface ElementTagNameMap {
    'ino-select': HTMLInoSelectElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-select': JSXElements.InoSelectAttributes;
    }
  }
  namespace JSXElements {
    export interface InoSelectAttributes extends HTMLAttributes {
      'autofocus'?: boolean;
      'disabled'?: boolean;
      'form'?: string;
      'multiple'?: boolean;
      'name'?: string;
      'required'?: boolean;
      'size'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface InoTooltip {
      /**
       * The target id the tooltip is attached to. If not given, the tooltip is attached to the parent component.
       */
      'inoFor': string;
      /**
       * The text shown in the tooltip.
       */
      'inoLabel': string;
      /**
       * Placement of the tooltip. Accepted values: top(-start, -end), right(-start, -end), bottom(-start, -end), left(-start, -end)
       */
      'inoPlacement': string;
      /**
       * The trigger to show the tooltip - either click, hover or focus. Multiple triggers possible by separating them with a space.
       */
      'inoTrigger': string;
    }
  }

  interface HTMLInoTooltipElement extends StencilComponents.InoTooltip, HTMLStencilElement {}

  var HTMLInoTooltipElement: {
    prototype: HTMLInoTooltipElement;
    new (): HTMLInoTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'ino-tooltip': HTMLInoTooltipElement;
  }
  interface ElementTagNameMap {
    'ino-tooltip': HTMLInoTooltipElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'ino-tooltip': JSXElements.InoTooltipAttributes;
    }
  }
  namespace JSXElements {
    export interface InoTooltipAttributes extends HTMLAttributes {
      /**
       * The target id the tooltip is attached to. If not given, the tooltip is attached to the parent component.
       */
      'inoFor'?: string;
      /**
       * The text shown in the tooltip.
       */
      'inoLabel'?: string;
      /**
       * Placement of the tooltip. Accepted values: top(-start, -end), right(-start, -end), bottom(-start, -end), left(-start, -end)
       */
      'inoPlacement'?: string;
      /**
       * The trigger to show the tooltip - either click, hover or focus. Multiple triggers possible by separating them with a space.
       */
      'inoTrigger'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;